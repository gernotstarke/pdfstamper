package pdfstamper

import com.itextpdf.awt.geom.Point
import com.itextpdf.text.*
import com.itextpdf.text.pdf.ColumnText
import com.itextpdf.text.pdf.PdfContentByte
import com.itextpdf.text.pdf.PdfReader
import com.itextpdf.text.pdf.PdfStamper

import java.awt.Color

/**
 * Stamp every page of a single file.
 * Provides implementations for stamping the header and stamping a centered footer.
 * Requires subclasses to provide implementations for stamping
 * file/chapter and page-number data.
 */

abstract class SingleFileStamper {

    // model contains configuration information
    // (header, file-prefix, page-prefix, separator-string etc.)
    protected StamperConfiguration config

    // processing state (== status)
    protected ProcessingState processingState

    // this will be generated by subclasses
    // and used by stampCenteredText-method
    protected String joinedFooterText

    // pdf reader, is created ONCE per file
    protected PdfReader reader;

    // an iText PdfStamper, created ONCE per file
    protected PdfStamper writer;

    /**
     * instances need a StamperConfiguration, otherwise they don't know what to stamp,
     * and in what orientation.
     *
     * Instance is created only ONCE per stamping-job - therefore remains identical for several files.
     **/
    protected SingleFileStamper(StamperConfiguration configuration) {
        super()
        this.config = configuration
        this.processingState = new ProcessingState()
    }

    /**
     * Stamps a pdf file by taking sourceFile and duplicating it to targetFile
     *
     * Pagenumbers might begin with a number greater than one, as this file might follow
     * another one... with consecutive numbering.
     *
     * Adding text, aka "stamping", is performed upon a canvas.
     *
     * @param sourceFileWithFullPath fully qualified path to source (pdf) file
     * @param targetFileWithFullPath fully qualified path to target (pdf) file
     *
     * @author Gernot Starke
     *
     * */
    public void stampSingleFile(String sourceFileWithFullPath,
                                String targetFileWithFullPath,
                                ProcessingState processingState) {

        // we need the processingState to keep track of pagenumbers
        this.processingState = processingState

        // instantiate pdf reader and writer (in iText-lingo: stamper, here called writer)
        setupStampingResources(sourceFileWithFullPath, targetFileWithFullPath)


        int nrOfPagesInThisFile = reader.getNumberOfPages()

        // loop over all pages in this file
        for (int currentPageInFile = 1; currentPageInFile <= nrOfPagesInThisFile; currentPageInFile += 1) {
            processingState.incrementTotalPageCount()
            stampSinglePage(currentPageInFile)
        }

        // evenify, if configured and current pagecount (== totalNumberOfPagesSoFar) is odd
        if ((config.evenify) && ((processingState.totalNumberOfPagesSoFar % 2) == 1))
            addBlankPageAfterLastRegularPage(nrOfPagesInThisFile)


        tearDownStampingResources()

    }


    // avoid having open files
    private void tearDownStampingResources() {
        // reader cannot be closed - throws an awful lot of exceptions
        //reader.close()
        writer.close()
    }


    /**
     * adds a blank page, if evenify is configured AND pagecount in this file is odd
     *
     * contract: must only be called if
     * <ul>
     *   <li> evenify is configured</li>
     *   <li> and current pagecount is odd</li>
     * </ul>
     * @param nrOfPagesInThisFile number of pages in current source document
     */
    protected void addBlankPageAfterLastRegularPage(int nrOfPagesInThisFile) {

        // get size of last page in document
        Rectangle previousPageSize = reader.getPageSize(nrOfPagesInThisFile)

        int nextPageNr = nrOfPagesInThisFile + 1

        // add a page of identical size
        writer.insertPage(nextPageNr, previousPageSize)
        PdfContentByte canvas = writer.getOverContent(nextPageNr)

        // stamp something like "deliberately left blank" on page

        // find center of page
        int blankTextPosX = (int) (previousPageSize.getWidth() / 2)
        int blankTextPosY = (int) (previousPageSize.getTop() / 2)

        // from iText
        Font helveticaThirtyPt = new Font(Font.FontFamily.HELVETICA, new Float(30), Font.BOLD,  BaseColor.LIGHT_GRAY )

        Phrase blankPagePhrase = new Phrase(0, new Chunk(config.blankPageText, helveticaThirtyPt))

        ColumnText.showTextAligned(canvas,
                Element.ALIGN_CENTER, blankPagePhrase, blankTextPosX,
                blankTextPosY, new Float(45))

        // as we added a page, we adjust the total page count
        processingState.incrementTotalPageCount()

        stampSinglePage( nextPageNr )
    }



     /*
     * 1.) make sure that source file exists
     * 2.) TODO: ensure source file is valid pdf
     * 3.) create reader and writer instance
     */
    private void setupStampingResources(String sourceFileWithFullPath, String targetFileWithFullPath) {

        // make sure source file exists, abort otherwise
        assert new File(sourceFileWithFullPath).exists()

        // initialize the pdf reader and writer
        reader = initPdfReader(sourceFileWithFullPath)
        writer = initPdfStamper(targetFileWithFullPath, reader)
    }


/*
 * add header and footer to a single page within the pdf file.
 *
 * The current processing state (e.g. files and pages processed so far)
 * are kept in processingState
 *
 */

    private void stampSinglePage(int currentPageNumberInFile) {

        // we have to extract the canvas, so we can actually perform the stamping
        PdfContentByte canvas = writer.getOverContent(currentPageNumberInFile);

        // determine size of current page
        Rectangle pageSize = reader.getPageSize(currentPageNumberInFile);

        // do the header (always printed without pagenumber)
        stampHeader(canvas, pageSize)

        // do the footer (might consist of two parts... we don't care here!)
        stampFooter(canvas, pageSize)

        // stamp the footer onto the page
        //stampTextOnPage(canvas, position, Element.ALIGN_CENTER, textToStamp);

    }

/**
 * Stamps the header:
 * First, calculates the header position, depending on page dimensions.
 * TODO: Takes page dimensions into account.
 *
 */
    public void stampHeader(PdfContentByte canvas, Rectangle pageSize) {

        Point headerPosition = PositionsOnPage.calculateCenteredHeaderPosition(pageSize)

        stampTextOnPage(canvas, headerPosition, Element.ALIGN_CENTER, config.header)
    }

/**
 * stamping the footer can be done in different ways, depending
 * on configuration settings:
 * "CENTERED": join both file and page info
 * "INSIDE" or "OUTSIDE": stamp file and page info independently
 */

    abstract public void stampFooter(PdfContentByte canvas, Rectangle pageSize)

/**
 * stamps the centered (part of the) footer.
 * @param pageSize
 * @param canvas
 */
    protected void stampCenteredFooter(PdfContentByte canvas, Rectangle pageSize, String textToStamp) {

        // determine appropriate position (centered, with some offset from the lower edge of the page
        Point footerPosition = PositionsOnPage.calculateCenteredFooterPosition(pageSize.getWidth())

        // stamp it...
        stampTextOnPage(canvas, footerPosition, Element.ALIGN_CENTER, textToStamp)
    }

/*
 * join together the file-prefix with the current file number
 */

    protected String joinFilePrefixAndNumber() {
        return config.getFilePrefix() + " " + processingState.currentFileNumber.toString()
    }

/*
 * join page-prefix with current page number
 */

    protected String joinPagePrefixAndNumber() {
        return config.getPagePrefix() + " " + processingState.totalNumberOfPagesSoFar.toString()
    }

/**
 * void stampTextOnPage: adds text at specified position on a page, represented by canvas
 *
 * @param canvas : the canvas to stamp on
 * @param textToStamp : the string we have to print. Might contain a prefix.
 *        Examples: "A-1", "42", "chapter 4, page 19"
 * @param postion : the position as iText-Point where we have to stamp
 * @param alignment : left-aligned, right-aligned or centered:
 *
 * @author Gernot Starke
 * */
    protected void stampTextOnPage(PdfContentByte canvas, Point position, int alignment, String textToStamp) {

        /*
        * from the iText documentation:
        * ColumnText.showTextAligned(
        *   PdfContentByte canvas, int alignment, Phrase phrase,
        *   float x, float y, float rotation)
         */
        ColumnText.showTextAligned(canvas, alignment,
                new Phrase(textToStamp),
                (float) position.getX(), (float) position.getY(), 0);

    }

/**
 * initializes the Pdf reader, so we can read one page after the other...
 * @param sourceFile : name of the file we want to read.
 * @return a reader instance
 */
    private initPdfReader(String sourceFile) {
        def PdfReader localReader

        try {
            localReader = new PdfReader(sourceFile);

        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return localReader
    }

/**
 * Initializes the writer
 *
 * @param targetFile what is the file where we output our resulting pdf
 * @param reader the pdf reader where we get the original content from
 * @return a valid writer instance
 */
    private PdfStamper initPdfStamper(String targetFile, PdfReader reader) {
        def PdfStamper localStamper

        assert reader != null

        try {
            localStamper = new PdfStamper(reader, new FileOutputStream(targetFile))

        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return localStamper
    }


}

/************************************************************************
 * This is free software - without ANY guarantee!
 *
 *
 * Copyright 2013, Dr. Gernot Starke, arc42.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *********************************************************************** */
